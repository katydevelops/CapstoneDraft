@page "/register"

@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@inject UserManager<UserModel> userManager;
@inject NavigationManager NavigationManager

@* Wrap register form in data annotations validator to capture missing properties marked as [Required] in the model and also ensure that username and password match custom annotation set *@
<div class="full-size-container">
    <div class="social-media-card">
        <div class="center-form">
            <img src="/Images/Welcome.png" alt="Welcome Image" class="main-title-img" />
                <h6>Please register for your Safety Net profile below!</h6>
                <div class="center-form">
                    <EditForm Model="@registerModelInstance" OnValidSubmit="@ProcessUserRegistration">
                    <DataAnnotationsValidator />
                    <ValidationSummary style="color: red; background: #FFD4D4; font-weight: bold; border-radius: 15px; font-size: 1.1rem; text-align: center; padding: 1.5rem;" />

                        <div class="custom-form-elements">
                        <label for="firstName">First Name:</label>
                            <InputText id="firstName" class="custom-input-elements" @bind-Value="@registerModelInstance.FirstName" placeholder="First Name" />
                        </div>
                        <div class="custom-form-elements">
                        <label for="lastName">Last Name</label>
                            <InputText id="lastName" class="custom-input-elements" @bind-Value="@registerModelInstance.LastName" placeholder="Last Name" />
                        </div>
                        <div class="custom-form-elements">
                        <label for="userName">Username:</label>
                            <InputText id="username" class="custom-input-elements" @bind-Value="@registerModelInstance.Username" placeholder="Username" />
                        </div>
                        <div class="custom-form-elements">
                        <label for="phone">Phone:</label>
                            <InputText id="phone" class="custom-input-elements" @bind-Value="@registerModelInstance.Phone" placeholder="Phone" />
                        </div>
                        <div class="custom-form-elements">
                        <label for="email">Email:</label>
                            <InputText id="email" class="custom-input-elements" @bind-Value="@registerModelInstance.Email" placeholder="E-Mail Address" />
                        </div>
                        <div class="custom-form-elements">
                        <label for="password">Password:</label>
                            <InputText type="password" id="password" class="custom-input-elements" @bind-Value="@registerModelInstance.Password" placeholder="Password" />
                        </div>
                        <div class="custom-form-elements">
                            <button type="submit" class="yellow-animated-button">Register!</button>
                        </div>
                    </EditForm>
                @if (!string.IsNullOrEmpty(registerSuccessMessage))
                {
                    <div class="alert alert-success" role="alert">@registerSuccessMessage</div>
                }
                @if (!string.IsNullOrEmpty(registerErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">@registerErrorMessage</div>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private RegisterModel registerModelInstance = new RegisterModel();
    private string registerSuccessMessage;
    private string registerErrorMessage;


    private async Task ProcessUserRegistration()
    {
        // Create a new user object and store all data from the register input fields
        var newlyCreatedUser = new UserModel
        {
            FirstName = registerModelInstance.FirstName,
            LastName = registerModelInstance.LastName,
            UserName = registerModelInstance.Username,
            PhoneNumber = registerModelInstance.Phone,
            Email = registerModelInstance.Email
        };
        // Connect the username that the user creates with the password they choose using UserManager's CreateAsync built-in method
        var userRegistration = await userManager.CreateAsync(newlyCreatedUser, registerModelInstance.Password);
        if (userRegistration.Succeeded)
        {
            registerSuccessMessage = "Your registration was successful!";
            StateHasChanged();
            await Task.Delay(2500);
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            registerErrorMessage = "Your registration was not succesful, please try again!";
        }
    }
  
}
