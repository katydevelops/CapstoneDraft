@page "/search"
@using CapstoneDraft.Models
@using CapstoneDraft.Services
@using System.Text.RegularExpressions;


@inject PostService PostService
@inject NavigationManager NavigationManager

<div class="neon-bg-container">
        <div class="social-media-card">
        <div class="center-input">
            <h2>Search User Posts and Comments</h2>
                <h6>Enter a term below to search Safety Net posts and comments.</h6>
                    <form @onsubmit="SearchPostsAndCommentsAsync">
                    <input type="text" @bind="searchQuery" placeholder="Enter your search query!" class="custom-dropdown" />
                        <button type="submit" class="yellow-animated-button">Search!</button>
                    </form>
            </div>
            @if (!string.IsNullOrEmpty(searchResultsErrorMessage))
            {
                <div class="alert alert-danger" role="alert">@searchResultsErrorMessage</div>
            }
        </div>
            @if (queryResults != null && queryResults.Any())
            {
                <div>
                    <ul>
                        @foreach (var post in queryResults)
                        {
                            <li>
                                <div class="search-card">
                                    <h4>@((MarkupString)HighlightSearchQuery(post.PostSubject, searchQuery))</h4>
                                    <p>@GetPostWithSearchQueryPreview(post.PostMessageBody, searchQuery)</p>
                                    <p>Posted by @(post.AuthorName ?? "Anonymous") on @post.PostCreatedTimestamp.ToShortDateString()</p>
                                    <button @onclick="() => ViewPost(post.PostId)" class="yellow-animated-button">View Full Post!</button>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

            }
</div>


@code {
    private string searchQuery;
    private List<PostModel> queryResults;
    private string searchResultsErrorMessage;

    private async Task SearchPostsAndCommentsAsync()
    {
        // Clear old error message
        searchResultsErrorMessage = string.Empty;
        if(string.IsNullOrWhiteSpace(searchQuery))
        {
            searchResultsErrorMessage = "Please enter a term in the search bar to continue!";
            queryResults = new List<PostModel>();
            return;
        }
        try
        {
            queryResults = await PostService.QueryPostsAndCommentsAsync(searchQuery);
        }
        catch
        {
            searchResultsErrorMessage = "There was an error while retrieving your search result - please try again!";
        }
    }

    private string HighlightSearchQuery(string text, string searchedQuery)
    {
        // To be able to include searches where the user includes spaces, need to split at the white space to search multiple words
        if (string.IsNullOrWhiteSpace(searchedQuery)) return text;
        string[] searchedWordsWithoutSpace = searchedQuery.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        // Highlight the searched words after the white space is removed and ignore case sensitivity in the searched query
        foreach (string word in searchedWordsWithoutSpace)
        {
            text = Regex.Replace(text, word, $@"<span class='highlight-search-query'>{word}</span>", RegexOptions.IgnoreCase);
        }
        return text;
    }

    private string GetPostWithSearchQueryPreview(string text, string searchedQuery)
    {
        // Find the index of the items that were searched by the user
        var searchIndex = text.IndexOf(searchedQuery, StringComparison.OrdinalIgnoreCase);
        if (searchIndex > 0)
        {
            // Search for 25 char before the searched words and 25 chars after the search words to provide a simple preview to the user
            var startSearchIndex = Math.Max(0, searchIndex - 25);
            var endSearchIndex = Math.Min(text.Length, searchIndex + 25 + searchedQuery.Length);
            var querySearchPreview = text.Substring(startSearchIndex, endSearchIndex - startSearchIndex);
            // This meets the assignment requirement of providing search functionality with multiple row results and displays becuase the preview will provide a rows of the searched index and columns of the multiple posts that match
            return $"{querySearchPreview} . . .";
        }
        return text;
    }

    private void ViewPost(int postId)
    {
        NavigationManager.NavigateTo($"/post/{postId}");
    }
}