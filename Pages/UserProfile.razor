@page "/userprofile"

@using CapstoneDraft.DataAnnotations;
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@using Microsoft.AspNetCore.Identity;
@using System.Text.RegularExpressions


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> UserManager;
@inject SignInManager<UserModel> LoginManager

@* Cascading Authentication State will ensure that only logged in users can view the Edit Profile information - any user that is not logged in will only see the content advising them they need to be logged in to see their user profile and a button redirecting them to the login page *@
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized Context="authorizedContext">
            <div class="full-size-container">
                <div class="social-media-card">
                    <div class="center-form">
                        <h1>Edit Profile</h1>
        <EditForm Model="@userModel" OnValidSubmit="UpdateUserProfileAsync">
            <DataAnnotationsValidator  />
                <ValidationSummary />

            <div class="custom-form-elements">
                <label for="firstName">First Name:</label>
                    <InputText id="firstName" @bind-Value="@userModel.FirstName" class="custom-input-elements" />
            </div>
                <div class="custom-form-elements">
                <label for="lastName">Last Name:</label>
                    <InputText id="lastName" @bind-Value="@userModel.LastName" class="custom-input-elements" />
            </div>
            <div class="custom-form-elements">
                <label for="phone">Phone Number:</label>
                <InputText id="phone" @bind-Value="@userModel.PhoneNumber" class="custom-input-elements" @oninput="ValidatePhone" />
                @*  Event handler will trigger phone regex for validation purposes *@ 
                @if (!PhoneValidated)
                {
                    <span class="validation-summary">Please enter a valid phone number!</span>
                }
            </div>
            <div class="custom-form-elements">
                <label for="email">E-Mail Address:</label>
                <InputText id="email" @bind-Value="@userModel.Email" class="custom-input-elements" @oninput="ValidateEmail" />
                @*  Event handler will trigger email regex for validation purposes *@
                @if (!EmailValidated)
                {
                    <span class="validation-summary">Please enter a valid email address!</span>
                }
            </div>
            <div class="custom-form-elements">
                <button type="submit" class="yellow-animated-button">Save Changes!</button>
            </div>
        </EditForm>
        @*  Success message will appear after the user selects save changes if all the initial profile data passes validation *@
        @if (DisplayProfileUpdatedMessage)
        {
            <div class="alert alert-success" role="alert">Your profile has been updated!</div>
        }
            <h2>Update Password</h2>
            <EditForm Model="@changeUserPassword" OnValidSubmit="UpdatePasswordAsync">
                <DataAnnotationsValidator  />
                @*  Needed to provide specific ValidationMessage functionality for current password and new password to ensure custome password data annotations were shown to the user *@
                <div class="custom-form-elements">
                    <label for="currentPassword">Current Password:</label>
                <InputText id="currentPassword" @bind-Value="@changeUserPassword.CurrentPassword" class="custom-input-elements" type="password" />
                                <div class="validation-summary"><ValidationMessage For="@(() => changeUserPassword.CurrentPassword)" /></div>
                </div>
                <div class="custom-form-elements">
                    <label for="newPassword">New Password:</label>
                    <InputText id="newPassword" @bind-Value="@changeUserPassword.NewPassword" class="custom-input-elements" type="password" />
                                <div class="validation-summary"><ValidationMessage For="@(() => changeUserPassword.NewPassword)" /></div>
                </div>
                <div class="custom-form-elements">
                    <button type="submit" class="yellow-animated-button">Update Password!</button>
                </div>
        </EditForm>
        @*  Will show error message if the user doesn't have both current password and new password completed and will show error if current password is wrong *@
        @if (!string.IsNullOrEmpty(PasswordValidationMessage))
        {
            <div class="alert alert-danger" role="alert">@PasswordValidationMessage</div>
        }
        @*  Password changed success message will appear once the user passes all validation reqiurements *@
        @if (DisplayPasswordChangeMessage)
        {
            <div class="alert alert-success text-center" role="alert">Your password has been changed successfully!</div>
        }
        @*  Generalized error handling message to prevent potential program crashes *@
        @if (DisplayErrorMessage)
        {
            <div class="alert alert-danger" role="alert">Your are receiving an error updating your user profile - please try again later!</div>
        }
        </div>
    </div>
</div>
</Authorized>
        <NotAuthorized>
            @*  Users that are not logged in or properly authenticated will only see a message that says they must log in to view the user profile and a button that redirects them to the login page *@
            <div class="unathorized-container ">
                <div class="neon-bg-container">
                    <div class="center-form">
                        <div class="social-media-card">
                            <div class="feed-post-header">
                            <h3>You need to be logged in to view your user profile!</h3>
                            </div>
                            <div class="feed-post-body">
                                <button class="yellow-animated-button" onclick="location.href='/';">Login</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private UserModel userModel = new();
    private ChangePasswordModel changeUserPassword = new ChangePasswordModel(); // Initialize Change Password Model since it has been created directly in this component
    private bool DisplayPasswordChangeMessage = false; // Display a success message to let use know password has been update
    private bool DisplayErrorMessage = false;
    private bool DisplayProfileUpdatedMessage = false;
    private string PasswordValidationMessage;
    private bool PhoneValidated = true; // Flag to confirm when the phone number passes the regex validation
    private bool EmailValidated = true; // Flag to confirm when the email address passes the regex validation

    private async Task UpdatePasswordAsync()
    {
        // Grab the authentication state of the user updating their password and ensure that user has entered both a current and new password and that the current password is actually correct
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentLoggedInUser = userAuthenticationState.User;
        if (string.IsNullOrEmpty(changeUserPassword.CurrentPassword) || string.IsNullOrEmpty(changeUserPassword.NewPassword))
        {
            PasswordValidationMessage = "Please complete the missing password information!";
            return;
        }
        var loggedInUser = await UserManager.GetUserAsync(currentLoggedInUser);
        var passwordValidated = await UserManager.CheckPasswordAsync(loggedInUser, changeUserPassword.CurrentPassword);
        if (!passwordValidated)
        {
            PasswordValidationMessage = "Your current password is incorrect - please try again!";
            return;
        }
        // Use built in ChangePasswordAsync method to update new password in the database and display success or error message to user accordingly
        var passwordUpdated = await UserManager.ChangePasswordAsync(userModel, changeUserPassword.CurrentPassword, changeUserPassword.NewPassword);
        if (passwordUpdated.Succeeded)
        {
            DisplayPasswordChangeMessage = true;
        }
        else
        {
            DisplayErrorMessage = true;
        }
    }

    private async Task UpdateUserProfileAsync()
    {
        try
        {
            // Ensure that both the email and phone pass validation - and if not - prompt the user to fix before updating
            if (!EmailValidated || !PhoneValidated)
            {
                return;
            }
            // Store the IdentityResult object from the built-in UpdateAsync method to a variable to check if the update to the user's information was successful or not and display the correct message to the user accordingly.
            IdentityResult profileSuccessfullyUpdated = await UserManager.UpdateAsync(userModel);
            if (profileSuccessfullyUpdated.Succeeded)
            {
                DisplayProfileUpdatedMessage = true;
                return;
            }
            else
            {
                DisplayErrorMessage = true;
            }
        }
        catch
        {
            DisplayErrorMessage = true;
        } 
    }

    // User all built-in methods of ASP.NET Core to fetch the state of the user, extract the the user identity details and store it into a variable that will then be used to fetch the user ID and model data if the user is properly authenticated
    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentLoggedInUser = userAuthenticationState.User;
        if (currentLoggedInUser.Identity.IsAuthenticated)
        {
            // The data that 
            var userId = UserManager.GetUserId(currentLoggedInUser);
            userModel = await UserManager.FindByIdAsync(userId);
        }
    }

    // Class to hold the current password and new password which will be used in ChangePasswordAsync built-in ASP Core method
    public class ChangePasswordModel
    {
        [PasswordAnnotation]
        public string CurrentPassword { get; set; }

        [PasswordAnnotation]
        public string NewPassword { get; set; }

    }

    // Simple email regex pattern that will ensure the email entered in the user profile meets general standards
    public void ValidateEmail(ChangeEventArgs args)
    {
        var email = args.Value.ToString();
        EmailValidated = Regex.IsMatch(email, @"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$");
    }

    // Simple email regex pattern that will ensure the phone is 10 numerical digits without requiring any specific format
    private void ValidatePhone(ChangeEventArgs args)
    {
        var phone = args.Value.ToString();
        PhoneValidated = Regex.IsMatch(phone, @"^\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}$");
    }
}