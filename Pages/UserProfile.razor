@page "/userprofile"

@using CapstoneDraft.DataAnnotations;
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@using Microsoft.AspNetCore.Identity;
@using System.Text.RegularExpressions


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> UserManager;
@inject SignInManager<UserModel> LoginManager
@inject ILogger<UserProfile> Logger

<div class="fullsize-container">
        <div class="social-media-card">
            <h1>Edit Profile</h1>
        <EditForm Model="@userModel" OnValidSubmit="UpdateUserProfileAsync">
            <DataAnnotationsValidator  />
            <ValidationSummary style="color: red;font-weight:bold; font-size: 1rem;background-color: #ffcccc;" />

            <div class="custom-form-elements">
                <label for="firstName">First Name:</label>
                    <InputText id="firstName" @bind-Value="@userModel.FirstName" class="custom-input-elements" />
            </div>
                <div class="custom-form-elements">
                <label for="lastName">Last Name:</label>
                    <InputText id="lastName" @bind-Value="@userModel.LastName" class="custom-input-elements" />
            </div>
            <div class="custom-form-elements">
                <label for="phone">Phone Number:</label>
                <InputText id="phone" @bind-Value="@userModel.PhoneNumber" class="custom-input-elements" @oninput="ValidatePhone" />
                @if (!PhoneValidated)
                {
                    <span class="regex-validation-message">Please enter a valid phone number!</span>
                }
            </div>
            <div class="custom-form-elements">
                <label for="email">E-Mail Address:</label>
                <InputText id="email" @bind-Value="@userModel.Email" class="custom-input-elements" @oninput="ValidateEmail" />
                @if (!EmailValidated)
                {
                    <span class="regex-validation-message">Please enter a valid email address!</span>
                }
            </div>
            <div class="custom-form-elements">
                <button type="submit" class="yellow-animated-button">Save Changes!</button>
            </div>
        </EditForm>
        @if (DisplayProfileUpdatedMessage)
        {
            <div class="alert alert-success" role="alert">Your profile has been updated!</div>
        }
            <h2>Update Password</h2>
            <EditForm Model="@changeUserPassword" OnValidSubmit="UpdatePasswordAsync">
                <div class="custom-form-elements">
                    <label for="currentPassword">Current Password:</label>
                <InputText id="currentPassword" @bind-Value="@changeUserPassword.CurrentPassword" class="custom-input-elements" type="password" />
                </div>
                <div class="custom-form-elements">
                    <label for="newPassword">New Password:</label>
                    <InputText id="newPassword" @bind-Value="@changeUserPassword.NewPassword" class="custom-input-elements" type="password"/>
                </div>
                <div class="custom-form-elements">
                    <button type="submit" class="yellow-animated-button">Update Password!</button>
                </div>
        </EditForm>
        @if (!string.IsNullOrEmpty(PasswordValidationMessage))
        {
            <div class="alert alert-danger" role="alert">@PasswordValidationMessage</div>
        }
        @if (DisplayPasswordChangeMessage)
            {
                <div class="alert alert-success" role="alert">Your password has been changed successfully!</div>
            }
        @if (DisplayErrorMessage)
        {
            <div class="alert alert-danger" role="alert">Your are receiving an error!</div>
        }
        </div>
</div>

@code {
    private UserModel userModel = new();
    private ChangePasswordModel changeUserPassword = new ChangePasswordModel();
    private bool DisplayPasswordChangeMessage = false; // Display a success message to let use know password has been update
    private bool DisplayErrorMessage = false;
    private bool DisplayProfileUpdatedMessage = false;
    private string PasswordValidationMessage;
    private bool PhoneValidated = true;
    private bool EmailValidated =  true;

    private async Task UpdatePasswordAsync()
    {
        if (userModel == null)
        {
            Logger.LogInformation("The usermodel is null which is causing an error!");
        }
        if (string.IsNullOrEmpty(changeUserPassword.CurrentPassword) || string.IsNullOrEmpty(changeUserPassword.NewPassword))
        {
            PasswordValidationMessage = "Please complete the missing password information!";
            return;
        }
        // Use built in ChangePasswordAsync method to update new password in the database and display success message to user
        var passwordUpdated = await UserManager.ChangePasswordAsync(userModel, changeUserPassword.CurrentPassword, changeUserPassword.NewPassword);
        if (passwordUpdated.Succeeded)
        {
            DisplayPasswordChangeMessage = true;
        }
        else
        {
            DisplayErrorMessage = true;
        }
    }

    private async Task UpdateUserProfileAsync()
    {
        Logger.LogInformation("Attempting to update user profile for user with ID '{UserId}'", userModel.Id);
        Logger.LogDebug("Values being updated: Email = {Email}, PhoneNumber = {PhoneNumber}", userModel.Email, userModel.PhoneNumber);
        try
        {
            IdentityResult profileSuccessfullyUpdated = await UserManager.UpdateAsync(userModel);
            if (profileSuccessfullyUpdated.Succeeded)
            {
                DisplayProfileUpdatedMessage = true;
                Logger.LogInformation("User profile updated successfully for user with ID '{UserId}'", userModel.Id);

                return;
            }
            else
            {
                foreach (var error in profileSuccessfullyUpdated.Errors)
                {
                    Logger.LogError("Error updating user profile for user with ID '{UserId}': {Error}", userModel.Id, error.Description);
                }

                DisplayErrorMessage = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An exception occurred while updating the user profile for user with ID '{UserId}'", userModel.Id);
            DisplayErrorMessage = true;
        } 
    }

    // User all built-in methods of ASP.NET Core to fetch the state of the user, extract the the user identity details and store it into a variable that will then be used to fetch the user ID and model data if the user is properly authenticated
    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentLoggedInUser = userAuthenticationState.User;
        if (currentLoggedInUser.Identity.IsAuthenticated)
        {
            // The data that 
            var userId = UserManager.GetUserId(currentLoggedInUser);
            userModel = await UserManager.FindByIdAsync(userId);
        }
    }

    // Class to hold the current password and new password which will be used in ChangePasswordAsync built-in ASP Core method
    public class ChangePasswordModel
    {
        [PasswordAnnotation]
        public string CurrentPassword { get; set; }

        [PasswordAnnotation]
        public string NewPassword { get; set; }

    }

    private void ValidateEmail(ChangeEventArgs args)
    {
        var email = args.Value.ToString();
        EmailValidated = Regex.IsMatch(email, @"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$");
    }

    private void ValidatePhone(ChangeEventArgs args)
    {
        var phone = args.Value.ToString();
        PhoneValidated = Regex.IsMatch(phone, @"^(1?(-?\d{3})-?)?(\d{7,11})(-?\d{1,4})$");
    }
}