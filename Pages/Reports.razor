@page "/reports"
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@using System.Text;

@inject ReportService ReportService

@* Enable the user to select from a list of reports that will display on the screen - mandatory requirements of multiple columns, rows and title included. Mandatory timestamps included in the Total Comments Per User Report, Total Posts Per User Report and Latest User Activity Report to meet this requirement. 
 *@
 <div class="neon-bg-container">
    <div class="social-media-container">
        <div class="social-media-card">
            <h2>Safety Net Reports</h2>
            <div class="center-form">
                <select @onchange="ProcessReportSelection" class="custom-dropdown">
                    <option value="0">Select a report:</option>
                    <option value="1">Total Posts Per User Report</option>
                    <option value="2">Total Comments Per User Report</option>
                    <option value="3">Total Number of Posts Per Category</option>
                    <option value="4">Latest User Activity Report</option>
                </select>
            </div>
        </div>
        @* Display the title of each report select to meet mandatory assignment requirement *@
        @if (!string.IsNullOrEmpty(reportTitle))
        {
            <div class="feed-card-header">
                <div class="center-form">
                    <h3>@reportTitle</h3>
                </div>
            </div>
        }
        @* Display the report table once each report is called to meet mandatory requirements of having multiple columns and rows *@
        @if (reportDisplayTable != null)
        {
            @reportDisplayTable
        }
    </div>
</div>

@code {
    private int selectedReport;
    private RenderFragment reportDisplayTable; // Render fragment is used to display the table structure of columns and rows that were required for the reports section of this assignment
    private string reportTitle = string.Empty;


    private async Task ProcessReportSelection(ChangeEventArgs args)
    {
        // Generate report based on the number selection that the user chose in the report dropdown
        selectedReport = Convert.ToInt32(args.Value);
        await GenerateReportsAsync();
    }

    private async Task GenerateReportsAsync()
    {
        try
        {
            // Switch statement will take the number value that is passed from the ProcessReportSelection and generate the selected report accordingly
            switch (selectedReport)
            {
                // Report 1 will display the total posts for each user and the latest timestamp for the user's most recent post (if they have posted)
                case 1:
                    reportTitle = "Total Posts Per User Report";
                    var totalPostPerUser = await ReportService.GetTotalPostsPerUserAsync();
                    reportDisplayTable = CreateReportDisplayTable(totalPostPerUser, new[] { "Username", "Total Posts", "Latest Post Timestamp" },
                    report => new object[] { report.Key, report.Value.TotalPosts, report.Value.LatestPostTimestamp != null ? report.Value.LatestPostTimestamp : "This user has not yet posted!" });
                    break;
                // 
                case 2:
                    reportTitle = "Total Comments Per User Report";
                    var totalCommentsPerUser = await ReportService.GetTotalCommentsPerUserAsync();
                    reportDisplayTable = CreateReportDisplayTable(totalCommentsPerUser, new[] { "Username", "Comment Count", "Latest Comment Timestamp " },
                    report => new object[] { report.Key, report.Value.TotalComments, report.Value.LatestCommentTimestamp?.ToString("g") ?? "This user has not yet commented!" });
                    break;
                case 3:
                    reportTitle = "Total Number of Posts Per Category Report";
                    var totalPostsPerCategory = await ReportService.GetTotalPostsPerCategoryAsync();
                    reportDisplayTable = CreateReportDisplayTable(totalPostsPerCategory, new[] { "Category", "Total Posts Per Category" },
                    report => new object[] { report.Key, report.Value });
                    break;
                case 4:
                    reportTitle = "Latest User Activity Report";
                    var userLastActive = await ReportService.GetUserLastActiveDetailsAsync();
                    reportDisplayTable = CreateReportDisplayTable(userLastActive, new[] { "Username", "Email", "User Last Active" },
                    report => new object[] { report.UserName, report.Email, report.UserLastActive.HasValue ? report.UserLastActive.Value.ToString("g") : "This user has never logged in!" });
                    return;
                default:
                    reportDisplayTable = null;
                    reportTitle = string.Empty;
                    break;
            }
        }
        catch
        {
            reportDisplayTable = null;
            reportTitle = "No Report Available";
        }
        StateHasChanged();
    }

    private RenderFragment CreateReportDisplayTable<TItem>(IEnumerable<TItem> query, IEnumerable<string> columnTitles, Func<TItem, IEnumerable<object>> queryResults)
    {
        return builder =>
        {
            builder.OpenComponent(0, typeof(ReportTableFormat<TItem>));
            builder.AddAttribute(1, "Query", query);
            builder.AddAttribute(2, "ColumnTitles", columnTitles);
            builder.AddAttribute(3, "QueryResults", queryResults);
            builder.CloseComponent();
        };
    }
}
