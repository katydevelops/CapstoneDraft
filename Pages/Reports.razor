@page "/reports"
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@using System.Text;

@inject ReportService ReportService

<div class="fullsize-container">
    <div class="social-media-container">
        <div class="social-media-card">
            <h2>Safety Net Reports</h2>
            <select @onchange="ProcessReportSelection">
                <option value="0">Select a report:</option>
                <option value="1">Total Posts Per User Report</option>
                <option value="2">Total Comments Per User Report</option>
                <option value="3">Total Number of Posts Per Category</option>
                <option value="4">Latest User Activity Report</option>
            </select>
        </div>
        @if (reportDisplayTable != null)
        {
            @reportDisplayTable
        }
    </div>
</div>

@code {
    private int selectedReport;
    private RenderFragment reportDisplayTable;

    private async Task ProcessReportSelection(ChangeEventArgs args)
    {
        selectedReport = Convert.ToInt32(args.Value);
        await GenerateReportsAsync();
    }

    private async Task GenerateReportsAsync()
    {

        try
        {
            switch (selectedReport)
            {
                case 1:
                    var totalPostPerUser = await ReportService.GetTotalPostsPerUserAsync();
                    reportDisplayTable = CreateReportDisplayTable(totalPostPerUser, new[] { "Username", "Total Posts", "Latest Post Timestamp" },
                    report => new object[] { report.Key, report.Value.TotalPosts, report.Value.LatestPostTimestamp });
                    break;
                case 2:
                    var totalCommentsPerUser = await ReportService.GetTotalCommentsPerUserAsync();
                    reportDisplayTable = CreateReportDisplayTable(totalCommentsPerUser, new[] { "Username", "Comment Count", "Latest Comment Timestamp " },
                    report => new object[] { report.Key, report.Value.TotalComments, report.Value.LatestCommentTimestamp?.ToString("g") ?? "No comments reutrned!" });
                    break;
                case 3:
                    var totalPostsPerCategory = await ReportService.GetTotalPostsPerCategoryAsync();
                    reportDisplayTable = CreateReportDisplayTable(totalPostsPerCategory, new[] { "Category", "Total Posts Per Category" },
                    report => new object[] { report.Key, report.Value });
                    break;
                case 4:
                    var userLastActive = await ReportService.GetUserLastActiveDetailsAsync();
                    reportDisplayTable = CreateReportDisplayTable(userLastActive, new[] { "Username", "Email", "User Last Active" },
                    report => new object[] { report.UserName, report.Email, report.UserLastActive.HasValue ? report.UserLastActive.Value.ToString("g") : "This user has never logged in!" });
                    return;
                default:
                    reportDisplayTable = null;
                    break;
            }
        }
        catch
        {

        }
    }

    private RenderFragment CreateReportDisplayTable<TItem>(IEnumerable<TItem> query, IEnumerable<string> columnTitles, Func<TItem, IEnumerable<object>> queryResults)
    {
        return builder =>
        {
            builder.OpenComponent(0, typeof(ReportTableFormat<TItem>));
            builder.AddAttribute(1, "Query", query);
            builder.AddAttribute(2, "Column Titles", columnTitles);
            builder.AddAttribute(3, "Query Results", queryResults);
            builder.CloseComponent();
        };
    }
}
