@page "/EditPost/{postId:int}"
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@inject PostService PostService
@inject UserManager<UserModel> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UploadPhotoService UploadPhotoService
@inject ILogger<EditPost> Logger


<div class="fullsize-container">
    <div class="social-media-container">
            <h2>Edit Post Test</h2>
            @if (!userAuthenticated)
            {
                <p>Please login in order to edit posts!</p>
            }
            else if (!postAuthor)
            {
                <p>You are not the author of this post - your request is denied!</p>
            }
            else
            {
                <div>
                    <div>
                        <div class="social-media-card">
                            <h3>Edit Post</h3>
                        <EditForm Model="tempFormData" OnValidSubmit="SubmitUpdatedPostAsync" novalidate>
                                <div>
                                    <label for="category" class="custom-form-elements">Category: </label>
                                        <InputSelect id="category" @bind-Value="tempFormData.TempPostCategory" class="custom-input-elements" required>
                                            <option value="">Select a Category</option>
                                            <option value="Safety Tip">Safety Tip</option>
                                            <option value="Safety Event">Safety Event</option>
                                            <option value="Report a Safety Incident">Report a Safety Incident</option>
                                        </InputSelect>
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Your Name: </label>
                                    <InputText id="name" class="custom-input-elements" @bind-Value="@tempFormData.TempPostNameOfPostAuthor" />
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Your Location: </label>
                                <InputText id="location" class="custom-input-elements" @bind-Value="@tempFormData.TempPostUserLocation" />
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Post Subject: </label>
                                <InputText id="subject" class="custom-input-elements" @bind-Value="@tempFormData.TempPostSubject" />
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Post Message: </label>
                                <InputText id="message" class="custom-input-elements" @bind-Value="@tempFormData.TempPostMessageBody" />
                                </div>
                            @if (!string.IsNullOrEmpty(postModel.PostPhoto))
                            {
                                <div>
                                    <label>Current Image: </label>
                                    <div>
                                        <img src="@($"/{postModel.PostPhoto}")" style="max-width: 200px;" class="image-thumbnail "alt="Current Post Image" />
                                    </div>
                                </div>
                            }
                            else if (ShowImageRemovedAlert)
                            {
                                <div class="alert alert-success">
                                    Image removed! Please select a new image below!
                                </div>
                            }
                            <div>
                                <label for="updated-image" class="custom-form-elements">New Image: </label>
                                <InputFile id="updated-image" OnChange="@ProcessNewImageAsync" />
                            </div>
                            <div>
                                <button type="submit" class="yellow-animated-button">Save!</button>
                            </div>
                        </EditForm>
                        @if (!String.IsNullOrEmpty(EditPostErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">@EditPostErrorMessage</div>
                        }
                     </div>
                 </div>
            </div>
            }
        </div>
    </div>


@code {
    [Parameter]
    public int EditPostId { get; set; }
    private TemporaryPostModel tempFormData = new();
    private PostModel postModel;
    private string EditPostErrorMessage;
    private bool ShowImageRemovedAlert;
    private bool userAuthenticated;
    private bool postAuthor;

    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userAuthenticated = userAuthenticationState.User.Identity.IsAuthenticated;
        Logger.LogInformation("User authenticated status: {Authenticated}", userAuthenticated);
        if (!userAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        var loggedInUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var loggedInUserId = UserManager.GetUserId(loggedInUser);
        postModel = await PostService.FetchPostAsync(EditPostId);
        if (postModel == null)
        {
            EditPostErrorMessage = "This post does not exist - please try again!";
        }
        postAuthor = postModel.UserId == loggedInUserId;
        if (!postAuthor)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        LoadPostDetails(postModel);
    }

    private void LoadPostDetails(PostModel postModel)
    {
        tempFormData.TempPostCategory = postModel.PostCategory;
        tempFormData.TempPostNameOfPostAuthor = postModel.AuthorName;
        tempFormData.TempPostUserLocation = postModel.UserLocation;
        tempFormData.TempPostSubject = postModel.PostSubject;
        tempFormData.TempPostMessageBody = postModel.PostMessageBody;
        tempFormData.TempPostPhoto = postModel.PostPhoto;
    }

    private async Task SubmitUpdatedPostAsync()
    {
        if (!postAuthor || !userAuthenticated)
        {
            EditPostErrorMessage = "You are not authorized to edit this post!";
            return;
        }
        LoadPostInputFields();
    }

    private void LoadPostInputFields()
    {
        postModel.PostCategory = tempFormData.TempPostCategory;
        postModel.AuthorName = tempFormData.TempPostNameOfPostAuthor;
        postModel.UserLocation = tempFormData.TempPostUserLocation;
        postModel.PostSubject = tempFormData.TempPostSubject;
        postModel.PostMessageBody = tempFormData.TempPostMessageBody;
    }

    private async Task ProcessNewImageAsync()
    {
        
    }
}
