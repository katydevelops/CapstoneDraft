@page "/EditPost/{EditPostId:int}"

@using CapstoneDraft.Models;
@using CapstoneDraft.Services;

@inject PostService PostService
@inject UserManager<UserModel> UserManager;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UploadPhotoService UploadPhotoService


<div class="full-size-container">
    <div class="social-media-card">
        <div class="center-form">
            <h2>Edit Your Post Below:</h2>
            @* Add validation to prevent a user that is not logged in - or a user who does not own the post - to edit a post if they directly navigate to the endpoint *@
                @if (!userAuthenticated)
                {
                    <p>Please login in order to edit posts!</p>
                }
                else if (!postAuthor)
                {
                    <p>You are not the author of this post - your request is denied!</p>
                }
                else
                {
                    @* Load selected post details into user input fields via the temporary post model so that the user will be able to directly edit what they wish to *@
                    <EditForm Model="tempFormData" OnValidSubmit="SubmitUpdatedPostAsync" novalidate>
                         <label for="category" class="custom-form-elements">Category: </label>
                            <InputSelect id="category" @bind-Value="tempFormData.TempPostCategory" class="custom-input-elements" required>
                                <option value="">Select a Category</option>
                                <option value="Safety Tip">Safety Tip</option>
                                <option value="Safety Event">Safety Event</option>
                                <option value="Report a Safety Incident">Report a Safety Incident</option>
                            </InputSelect>
                                <div class="custom-form-elements">
                                    <label for="name">Your Name: </label>
                                    <InputText id="name" class="custom-input-elements" @bind-Value="@tempFormData.TempPostNameOfPostAuthor" />
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Your Location: </label>
                                <InputText id="location" class="custom-input-elements" @bind-Value="@tempFormData.TempPostUserLocation" />
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Post Subject: </label>
                                <InputText id="subject" class="custom-input-elements" @bind-Value="@tempFormData.TempPostSubject" />
                                </div>
                                <div class="custom-form-elements">
                                    <label for="name">Post Message: </label>
                                <InputTextArea id="message" class="custom-input-elements" @bind-Value="@tempFormData.TempPostMessageBody" />
                                </div>
                            @* Include te ability to edit the post photo, if the user uploaded one, or remove the original image altogether *@
                            @if (!string.IsNullOrEmpty(postModel.PostPhoto))
                            {
                                <div>
                                    <label>Current Image: </label>
                                    <div>
                                        <img src="@($"/{postModel.PostPhoto}")" style="max-width: 200px;" class="image-thumbnail "alt="Current Post Image" />
                                    </div>
                                    <button type="button" class="yellow-animated-button" @onclick="RemoveImage">Remove Photo</button>
                                </div>
                            }
                            else if (ShowImageRemovedAlert)
                            {
                                <div class="alert alert-success">
                                    Image removed! Please select a new image below if you wish to.
                                </div>
                            }
                            <div>
                                @* The ProcessNewImageAsync method will run the user's newly selected photo through image compression before updating it to the database and feed *@
                                <label for="updated-image" class="custom-form-elements">New Image: </label>
                                <InputFile id="updated-image" OnChange="@ProcessNewImageAsync" /> 
                            </div>
                            <div>
                                <button type="submit" class="yellow-animated-button">Save!</button>
                            </div>
                    </EditForm>
                    @if (!String.IsNullOrEmpty(EditPostErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">@EditPostErrorMessage</div>
                    }
                }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int EditPostId { get; set; } // Component parameter will past the post id from the parent, Feed, to the child component, Edit Post
    private TemporaryPostModel tempFormData = new();
    private PostModel postModel;
    public string EditPostErrorMessage;
    private bool ShowImageRemovedAlert; // Show success message when the user removes the original post image
    private bool userAuthenticated; // Flag to ensure that only the post author can edit a post - not another user
    private bool postAuthor;

    protected override async Task OnInitializedAsync()
    {
        // Grab user authentication state - if the user is not authenticated then send them to the login page - if they are authenticated as the post author, then load the post based on the Id so they can make edits
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userAuthenticated = userAuthenticationState.User.Identity.IsAuthenticated;
        if (!userAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        var loggedInUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var loggedInUserId = UserManager.GetUserId(loggedInUser);
        postModel = await PostService.FetchPostAsync(EditPostId);
        if (postModel == null)
        {
            EditPostErrorMessage = "This post does not exist - please try again!";
        }
        postAuthor = postModel.UserId == loggedInUserId;
        if (!postAuthor)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        LoadPostDetails(postModel);
    }

    private void LoadPostDetails(PostModel postModel)
    {
        // Need to translate the post details to the Temporary Post Model so that the details will load into the input fields for the user to make the direct changes they want
        tempFormData.TempPostCategory = postModel.PostCategory;
        tempFormData.TempPostNameOfPostAuthor = postModel.AuthorName;
        tempFormData.TempPostUserLocation = postModel.UserLocation;
        tempFormData.TempPostSubject = postModel.PostSubject;
        tempFormData.TempPostMessageBody = postModel.PostMessageBody;
        tempFormData.TempPostPhoto = postModel.PostPhoto;
    }

    private async Task SubmitUpdatedPostAsync()
    {
        // Add another check to make sure the user is authorized to save the changes they made in the input fields, and if so, save changes to the post Id in the database
        if (!postAuthor || !userAuthenticated)
        {
            EditPostErrorMessage = "You are not authorized to edit this post!";
            return;
        }
        UpdatePostFromInputFields();
        await SaveUpdatedPostAsync();
    }

    private async Task SaveUpdatedPostAsync()
    {
        // After saving the changes to the post Id - navigate back to the feed so the user can see the live updated post
        try
        {
            await PostService.EditPostAsync(postModel);
            NavigationManager.NavigateTo("/feed");
        }
        catch
        {
            EditPostErrorMessage = "An error occurred while updating this post - please try again!";
        }
    }

    private void UpdatePostFromInputFields()
    {
        // Updates the post id with the changes that the user edited in the input fields
        postModel.PostCategory = tempFormData.TempPostCategory;
        postModel.AuthorName = tempFormData.TempPostNameOfPostAuthor;
        postModel.UserLocation = tempFormData.TempPostUserLocation;
        postModel.PostSubject = tempFormData.TempPostSubject;
        postModel.PostMessageBody = tempFormData.TempPostMessageBody;
        // Ensure the newly selected photo is saved to the post Id
        if (!string.IsNullOrEmpty(tempFormData.TempPostPhoto) && tempFormData.TempPostPhoto != postModel.PostPhoto)
        {
            postModel.PostPhoto = tempFormData.TempPostPhoto;
        }
        // Ensure that the image is removed from 
        else if (string.IsNullOrEmpty(tempFormData.TempPostPhoto))
        {
            postModel.PostPhoto = null;
        }
    }

    public async Task ProcessNewImageAsync(InputFileChangeEventArgs args)
    {
        // Pass in InputFileChangeEventArgs to record file info of new photo, ensure that the photo is in the proper format and then send to the UploadPhotoService for image size compression
        var newSelectedImage = args.File;
        if (newSelectedImage != null)
        {
            var fileFormat = newSelectedImage.ContentType.ToLower();
            if (fileFormat != "image/jpeg" && fileFormat != "image/png")
            {
                EditPostErrorMessage = "Invalid file format - please select a .jpeg or .png image and try again!";
            }
            else
            {
                EditPostErrorMessage = string.Empty;
                var newSelectedImagePath = await UploadPhotoService.ProcessSelectedPhotoAsync(newSelectedImage);
                tempFormData.TempPostPhoto = newSelectedImagePath;
            }
            StateHasChanged();
        }
    }

    private void RemoveImage()
    {
        // Remove the image if the user selects the delete photo button, show the message on the screen and update the component state
        tempFormData.TempPostPhoto = null;
        postModel.PostPhoto = null;
        ShowImageRemovedAlert = true;
        StateHasChanged();
    }
}
