@page "/AddPost"
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats;
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using SixLabors.ImageSharp.Formats.Png
@using System.IO
@using Microsoft.AspNetCore.Components.Forms

@inject PostService PostService
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<AddPost> Logger


            

@if (userAuthenticated)
{
    <div class="fullsize-container">
        <div class="social-media-container">
            <div class="social-media-card">
                <h3>Create a New Post</h3>
                <EditForm Model="@tempFormData" OnValidSubmit="ProcessNewPostAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="custom-form-elements">
                        <label for="postCategory">Category: </label>
                        <InputSelect id="postCategory" @bind-Value="tempFormData.TempPostCategory" class="custom-input-elements" required>
                            <option value="">Select a Category</option>
                            <option value="Safety Tip">Safety Tip</option>
                            <option value="Safety Event">Safety Event</option>
                            <option value="Report a Safety Incident">Report a Safety Incident</option>
                        </InputSelect>
                    </div>
                    <div class="custom-form-elements">
                        <label for="name">Name: </label>
                        <InputText id="name" @bind-Value="tempFormData.TempPostNameOfPostAuthor" class="custom-input-elements" />
                    </div>
                    <div class="custom-form-elements">
                        <label for="location">Location:</label>
                        <InputText id="location" @bind-Value="tempFormData.TempPostUserLocation" class="custom-input-elements" />
                    </div>
                    <div class="custom-form-elements">
                        <label for="subject">Subject:</label>
                        <InputText id="subject" @bind-Value="tempFormData.TempPostSubject" class="custom-input-elements" />
                     </div>
                    <div class="custom-form-elements">
                            <label for="body">Message:</label>
                        <InputTextArea id="body" @bind-Value="tempFormData.TempPostMessageBody" class="custom-input-elements" />
                        </div>
                    <div class="custom-form-elements">
                        <InputFile OnChange="ProcessFileUploadAsync" class="custom-input-elements" />
                        </div>
                    <div class="custom-form-elements">
                        <button type="submit" class="yellow-animated-button">Submit</button>
                    </div>
                </EditForm>
        </div>
    </div>
</div>
}
else
{
    <p>You need to be logged in to create a post!</p>
}
@if(!string.IsNullOrEmpty(AddPostErrorMessage))
{
    <div class="alert alert-danger" role="alert">@AddPostErrorMessage</div>
}

@code {
    private TemporaryPostModel tempFormData = new TemporaryPostModel();
    private bool userAuthenticated = false;
    private string AddPostErrorMessage;

    // Fetch authentication state for user using built in ASP.NET methods and if they are authenticated then load the add new post functionality by trigger flag on load
    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userAuthenticated = userAuthenticationState.User.Identity.IsAuthenticated;
        Logger.LogInformation("User authenticated status: {Authenticated}", userAuthenticated);
    }

    private async Task ProcessNewPostAsync()
    {
        if (string.IsNullOrWhiteSpace(tempFormData.TempPostNameOfPostAuthor))
        {
            AddPostErrorMessage = "You must include your name with you post!";
        }
        var loggedInUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var loggedInUserId = UserManager.GetUserId(loggedInUser);
        var newPost = new PostModel
            {
                AuthorName = tempFormData.TempPostNameOfPostAuthor,
                PostCategory = tempFormData.TempPostCategory,
                UserLocation = tempFormData.TempPostUserLocation,
                PostSubject = tempFormData.TempPostSubject,
                PostMessageBody = tempFormData.TempPostMessageBody,
                PostCreatedTimestamp = DateTime.UtcNow,
                UserId = loggedInUserId,
                PostPhoto = tempFormData.TempPostPhoto
            };
        Logger.LogInformation($"Post will be created with image path: {newPost.PostPhoto}");
        try
        {
            await PostService.AddNewPostAsync(newPost);
            NavigationManager.NavigateTo("/feed");
        }
        catch
        {
            AddPostErrorMessage = "Your post cannot be created at this time. Please try again.";
        }
        tempFormData = new TemporaryPostModel();
    }

    private async Task ProcessFileUploadAsync(InputFileChangeEventArgs args)
    {
        var selectedFile = args.File;
        if (selectedFile != null)
        {
            try
            {
                var filePath = await ProcessSelectedPhotoAsync(selectedFile);
                tempFormData.TempPostPhotoFilePath = filePath;
            }
            catch (Exception error)
            {
                Logger.LogInformation(error, "There was an error uploading your file");
            }
        }
    }

    private string CreateRandomFileName(string fileExtentsion) => $"{Guid.NewGuid()}{fileExtentsion}";

    private string CreateUploadedPhotoDirectory(string rootFile, string uploadedPhotoDirectory)
    {
        var createUploadFolder = Path.Combine(rootFile, uploadedPhotoDirectory);
        if (!Directory.Exists(createUploadFolder))
        {
            Directory.CreateDirectory(createUploadFolder);
        }
        return createUploadFolder;
    }


    private IImageEncoder SetPhotoType(string photoType) => photoType.ToLower() switch
    {
        ".jpg" or ".jpeg" => new JpegEncoder {Quality = 50 },
        ".png" => new PngEncoder(),
    };

    private async Task<string> ProcessSelectedPhotoAsync(IBrowserFile photoFile)
    {
        // Create folder for added photos to be upladed to in wwwroot
        var fileDirectory = CreateUploadedPhotoDirectory("wwwroot", "Uploaded_Photos");
        const long fileSizeLimit = 3 * 1024 * 1024; // Needed to make a long for OpenReadSteam to accept
        var photoFileExtension = Path.GetExtension(photoFile.Name);
        var randomFileName = CreateRandomFileName(photoFileExtension);
        var photoFilePath = Path.Combine(fileDirectory, randomFileName);
        try
        {
            // If the Uploaded Photos folder doesn't yet exist, create ie
            if (photoFile.Size > fileSizeLimit)
            {
                AddPostErrorMessage = "Your selected photo exceeds the maximum file size limit! Please try a different photo!";
            }
            // Use memory stream to compress the image in memory before storing the compressed image to the database
            await using (var uploadFileSteam = photoFile.OpenReadStream(fileSizeLimit))
            {
                await CompressImageSizeAsync(uploadFileSteam, photoFilePath, photoFileExtension);
            }
        }
        catch (Exception error)
        {
            Logger.LogInformation(error, "You are receiving an error with the iamge you are trying to upload - please try agian");
        }
    }

    private async Task CompressImageSizeAsync(Stream uploadFileStream, string photoFilePath, string photoFileExtension)
    {
        using (var photo = Image.Load(uploadFileStream))
        {
            photo.Mutate(image => image.Resize(new ResizeOptions
                {
                    Mode = ResizeMode.Max,
                    Size = new Size(500),
                }));
            IImageEncoder photoType = SetPhotoType(photoFileExtension);
            await photo.SaveAsync(photoFilePath, photoType);
        }
    }
}
