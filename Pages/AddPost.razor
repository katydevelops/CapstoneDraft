@page "/AddPost"
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;


@inject PostService PostService
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<AddPost> Logger

<div class="fullsize-container">
    <div class="social-media-container">
            <h3>Create a New Post</h3>
    </div>
</div>

@if (userAuthenticated)
{
    <EditForm Model="@tempFormData" OnValidSubmit="ProcessNewPost">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="custom-form-elements">
            <label for="postCategory">Category: </label>
            <InputSelect id="postCategory" @bind-Value="tempFormData.TempPostCategory" class="custom-input-elements" required>
                <option value="">Select a Category</option>
                <option value="Safety Tip">Safety Tip</option>
                <option value="Safety Event">Safety Event</option>
                <option value="Report a Safety Incident">Report a Safety Incident</option>
            </InputSelect>
        </div>
        <div class="custom-form-elements">
            <label for="name">Name: </label>
            <InputText id="name" @bind-Value="tempFormData.TempPostNameOfPostAuthor" class="custom-input-elements" />
        </div>
        <div class="custom-form-elements">
            <label for="location">Location:</label>
            <InputText id="location" @bind-Value="formData.Location" class="form-control" />
        </div>
        <div class="custom-form-elements">
            <label for="subject">Subject:</label>
            <InputText id="subject" @bind-Value="formData.Subject" class="form-control" />
         </div>
        <div class="custom-form-elements">
                <label for="body">Message:</label>
                <InputTextArea id="body" @bind-Value="formData.Body" class="form-control" />
            </div>
        <div class="custom-form-elements">
                <InputFile OnChange="HandleFileSelected" class="form-control" />
            </div>
        <div class="custom-form-elements">
            <button type="submit" class="yellow-animated-button">Submit</button>
        </div>
    </EditForm>
}

@code {
    private TemporaryPostModel tempFormData = new TemporaryPostModel();
    private bool userAuthenticated = false;
    private string AddPostErrorMessage;

    // Fetch authentication state for user using built in ASP.NET methods and if they are authenticated then load the add new post functionality by trigger flag on load
    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userAuthenticated = userAuthenticationState.User.Identity.IsAuthenticated;
        Logger.LogInformation("User authenticated status: {Authenticated}", userAuthenticated);
    }

    private async Task ProcessNewPost()
    {
        if (string.IsNullOrWhiteSpace(tempFormData.TempPostNameOfPostAuthor))
        {
            AddPostErrorMessage = "You must include your name with you post!";
        }
        var loggedInUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var loggedInUserId = UserManager.GetUserId(loggedInUser);
        var newPost = new PostModel
            {
                AuthorName = tempFormData.TempPostNameOfPostAuthor,
                PostCategory = tempFormData.TempPostCategory,
                UserLocation = tempFormData.TempPostUserLocation,
                PostSubject = tempFormData.TempPostSubject,
                PostMessageBody = tempFormData.TempPostMessageBody,
                PostCreatedTimestamp = DateTime.UtcNow,
                UserId = loggedInUserId,
                PostPhoto = tempFormData.TempPostPhoto
            };
        Logger.LogInformation($"Post will be created with image path: {newPost.PostPhoto}");
        try
        {
            await PostService.AddNewPostAsync(newPost);
            NavigationManager.NavigateTo("/feed");
        }
        catch
        {
            AddPostErrorMessage = "Your post cannot be created at this time. Please try again.";
        }
        tempFormData = new TemporaryPostModel();
    }
}
