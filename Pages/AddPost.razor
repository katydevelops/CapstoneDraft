@page "/AddPost"
@using CapstoneDraft.Models;
@using CapstoneDraft.Services;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats;
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using SixLabors.ImageSharp.Formats.Png
@using System.IO
@using Microsoft.AspNetCore.Components.Forms

@inject UploadPhotoService UploadPhotoService
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> UserManager;
@inject AuthenticationStateProvider AuthenticationStateProvider




@* Add flag to only show the Add Post end point if the user is validated via AuthenticationStateProvider first
 *@
 @if (userAuthenticated)
{
    <div class="full-size-container">
        <div class="social-media-card">
            <div class="center-form">
                <h2>Create a New Post</h2>
                @* Temp form data will hold the information entered by the user via the UI inputs and save as a Post *@
                <EditForm Model="@tempFormData" OnValidSubmit="ProcessNewPostAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="custom-form-elements">
                        <label for="category">Category: </label>
                        <InputSelect id="category" @bind-Value="tempFormData.TempPostCategory" class="custom-input-elements" required>
                            <option value="">Select a Category</option>
                            <option value="Safety Tip">Safety Tip</option>
                            <option value="Safety Event">Safety Event</option>
                            <option value="Report a Safety Incident">Report a Safety Incident</option>
                        </InputSelect>
                    </div>
                    <div class="custom-form-elements">
                        <label for="name">Your Name: </label>
                        <InputText id="name" @bind-Value="tempFormData.TempPostNameOfPostAuthor" class="custom-input-elements" />
                    </div>
                    <div class="custom-form-elements">
                        <label for="location">Your Location: </label>
                        <InputText id="location" @bind-Value="tempFormData.TempPostUserLocation" class="custom-input-elements" />
                    </div>
                    <div class="custom-form-elements">
                        <label for="subject">Post Subject: </label>
                        <InputText id="subject" @bind-Value="tempFormData.TempPostSubject" class="custom-input-elements" />
                     </div>
                    <div class="custom-form-elements">
                            <label for="body">Post Message: </label>
                        <InputTextArea id="body" @bind-Value="tempFormData.TempPostMessageBody" class="custom-input-elements" />
                        </div>
                    <div class="custom-form-elements">
                        <InputFile OnChange="ProcessFileUploadAsync" class="custom-input-elements" />
                        </div>
                    <div class="custom-form-elements">
                        <button type="submit" class="yellow-animated-button">Submit</button>
                    </div>
                </EditForm>
                @if (!string.IsNullOrEmpty(AddPostErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">@AddPostErrorMessage</div>
                }
        </div>
    </div>
</div>
}
else
{
    @* Prevent those who are not currently logged in from seeing the post for privacy and security purposes *@
    <div class="unathorized-container ">
        <div class="neon-bg-container">
            <div class="center-form">
                <div class="social-media-card">
                    <div class="feed-post-header">
                        <h3>You need to be logged in to create a post!</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private TemporaryPostModel tempFormData = new TemporaryPostModel(); // Temp form data will hold data entered by the user in the input fields
    private bool userAuthenticated = false; // Flag to handle rendering content if user is not authenticated
    private string AddPostErrorMessage; // Error messaging handling to display relevant error message to the user

    // Fetch authentication state for user using built in ASP.NET methods and if they are authenticated then load the add new post functionality by trigger flag on load
    protected override async Task OnInitializedAsync()
    {
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userAuthenticated = userAuthenticationState.User.Identity.IsAuthenticated;
    }

    private async Task ProcessNewPostAsync()
    {
        if (string.IsNullOrWhiteSpace(tempFormData.TempPostNameOfPostAuthor))
        {
            AddPostErrorMessage = "You must include your name with you post!";
        }
        // Fetch authentication state of user again to ensure that the correct user is being associated with the new post that is being saved to the database
        var loggedInUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var loggedInUserId = UserManager.GetUserId(loggedInUser);
        var newPost = new PostModel
            {
                AuthorName = tempFormData.TempPostNameOfPostAuthor,
                PostCategory = tempFormData.TempPostCategory,
                UserLocation = tempFormData.TempPostUserLocation,
                PostSubject = tempFormData.TempPostSubject,
                PostMessageBody = tempFormData.TempPostMessageBody,
                PostCreatedTimestamp = DateTime.UtcNow,
                UserId = loggedInUserId,
                PostPhoto = tempFormData.TempPostPhoto
            };
        try
        {
            // Add new post to database and return to feed where the new post will be displayed for the user to see
            await PostService.AddNewPostAsync(newPost);
            NavigationManager.NavigateTo("/feed");
        }
        catch
        {
            AddPostErrorMessage = "Please enter ALL the required post fields and then submit again!";
        }
        tempFormData = new TemporaryPostModel(); // Reset temp form data to clear the input that the current user entered so that a blank form is shown next time
    }


    // Pass in Blazor InputFileChangeEventArgs which will store details about the image 
    private async Task ProcessFileUploadAsync(InputFileChangeEventArgs args)
    {
        var file = args.File;
        if (file != null)
        {
            try
            {
                // Call the service to process the file and get the saved path
                var savedFilePath = await UploadPhotoService.ProcessSelectedPhotoAsync(file);
                // Update the UI model with the path of the saved file
                tempFormData.TempPostPhoto = savedFilePath;
            }
            // Error handling to handle any file that is uploaded besides the accepted png and jpg file formats
            catch (Exception error)
            {
                AddPostErrorMessage = "Your file is invalid. Please select a different file and then try again!";
            }
        }
    }
}
