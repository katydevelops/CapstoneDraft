@page "/feed"
@using CapstoneDraft.Models
@using CapstoneDraft.Services
@using Microsoft.AspNetCore.Identity
@inject PostService PostService
@inject UserManager<UserModel> UserManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Feed> Logger


<div class="full-size-container">
    <div class="custom-input-elements">
        <h2 class="center-form">🌐 Welcome to the Safety Net Feed! 🌐</h2>
        <button @onclick="GoToAddPostPageAsync" class="yellow-animated-button">Create a New Post!</button>
    </div>
    <div class="custom-input-elements">
        <div class="center-form">
            <label for="category">Filter Posts by Category: </label>
            <select @onchange="CategoryDropdownSelectedAsync" class="custom-dropdown">
                <option value="">Select a Category</option>
                <option value="Safety Tip">Safety Tip</option>
                <option value="Safety Event">Safety Event</option>
                <option value="Report a Safety Incident">Report a Safety Incident</option>
            </select>
        </div>
    </div>
    @if (posts == null || !posts.Any())
    {
        <h1>There are currently no posts in the feed!</h1>
    }
    @if (!string.IsNullOrEmpty(FeedErrorMessage))
    {
        <div class="alert alert-danger" role="alert">@FeedErrorMessage</div>
    }
    else
    {
        @foreach (var post in posts)
        {
            <div class="card mb-3">
                <div class="feed-post-header">
                    <h6><strong>Name:</strong> @post.AuthorName</h6>
                    <h6><strong>Subject:</strong> @post.PostSubject</h6>
                    <h6><strong>Post Category:</strong> @post.PostCategory</h6>
                </div>
                <div class="feed-post-body">
                    <p class="feed-post-text">@post.PostMessageBody</p>
                    <p class="feed-post-text"><sub>Posted by <strong>@(post.AuthorName) </strong> - @post.PostCreatedTimestamp.ToString("MM/dd/yy")</sub></p>
                    @if (!string.IsNullOrWhiteSpace(post.PostPhoto))
                    {
                        <img src="@($"/{post.PostPhoto}")" asp-append-version="true" alt="Post image" class="minify-img" />
                    }
                </div>
                <div class="feed-post-footer">
                    <div class="feed-post-button-container">
                        <div class="post-like-edit-delete">
                            <button class="like-button" @onclick="() => LikePostAsync(post)">😍 Like (@post.PostLikes)</button>
                            @if (post.UserId == currentUserId)
                            {
                                <button class="edit-button" @onclick="() => EditPost(post.PostId)">Edit Post 📝</button>
                                <button class="delete-button" @onclick="() => DeletePostAsync(post.PostId)">Delete Post 🚮</button>
                            }
                        </div>
                        <div class="feed-comment-container">
                            <form @onsubmit="@(async () => await AddComment(post))">
                                <input type="text" @bind="commentText" class="comment-input-textarea" placeholder="Add a comment" />
                                <button type="submit" class="comment-button">📣 Comment</button>
                            </form>
                        </div>
                        <div class="feed-user-comments">
                            <h5>Comments:</h5>
                            @foreach (var comment in post.PostComments)
                            {
                                if (editedCommentId == comment.CommentId)
                                {
                                    <div class="feed-edit-comment-container">
                                        <input type="text" @bind="commentText" class="comment-input" />
                                        <button @onclick="() => SaveCommentAsync(comment)" class="save-button">Save</button>
                                        <button class="cancel-button" @onclick="() => CancelEditing()">Cancel</button>
                                    </div>
                                }
                                else
                                {
                                    <p>@comment.CommentText</p>
                                    <p><sub>by <strong>@comment.User.UserName</strong> posted on @comment.CommentCreatedTimestamp.ToShortDateString()</sub></p>
                                    @if (comment.UserId == currentUserId)
                                    {
                                        <div class="comment-button-container">
                                            <button class="edit-comment-button" @onclick="() => EditComment(comment)">Edit</button>
                                            <button class="delete-comment-button" @onclick="() => DeleteCommentAsync(comment.CommentId)">Delete</button>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>




@code {
    public List<PostModel> posts;
    private string commentText;
    private int editedCommentId;
    private string currentUserId;
    private string FeedErrorMessage;
    private string categorySelected = "";


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Fetching user authentication state.");
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var loggedInUser = userAuthenticationState.User;
        Logger.LogInformation("User authenticated: {0}", loggedInUser.Identity.IsAuthenticated);

        if (loggedInUser.Identity.IsAuthenticated)
        {
            Logger.LogInformation("User claims: {0}", loggedInUser.Claims.Select(c => $"{c.Type}: {c.Value}"));

            Logger.LogInformation("User is authenticated. Fetching posts.");
            var loggedInUserId = UserManager.GetUserId(loggedInUser);
            currentUserId = loggedInUserId;
            posts = await PostService.FetchFeedPostAsync();
        }
        else
        {
            Logger.LogWarning("User is not authenticated.");
        }
    }

    private async Task GoToAddPostPageAsync()
    {
        NavigationManager.NavigateTo("/AddPost");
    }

    private async Task CategoryDropdownSelectedAsync(ChangeEventArgs args)
    {
        categorySelected = args.Value?.ToString();
        await UpdateCategoryDropdownAsync();
    }

    private async Task UpdateCategoryDropdownAsync()
    {
        if (string.IsNullOrEmpty(categorySelected) || categorySelected == "All Categories Selected")
        {
            posts = await PostService.FetchFeedPostAsync();
        }
        else
        {
            posts = await PostService.FetchPostsByCategoryAsync(categorySelected);
        }
        StateHasChanged();
    }

    private async Task LikePostAsync(PostModel Post)
    {
        Post.PostLikes++;
        await PostService.EditPostAsync(Post);
    }

    private void EditPost(int postId)
    {
        Logger.LogInformation($"Navigating to edit post page for post ID: {postId}");
        NavigationManager.NavigateTo($"/EditPost/{postId}");
    }

    private async Task DeletePostAsync(int postId)
    {
        Logger.LogInformation($"Attempting to delete post ID: {postId}");
        var postPendingDeletion = posts.FirstOrDefault(post => post.PostId == postId);
        if (postPendingDeletion != null && postPendingDeletion.UserId == currentUserId)
        {
            await PostService.RemovePostAsync(postId);
            posts.Remove(postPendingDeletion);
            Logger.LogInformation($"Post ID: {postId} deleted successfully.");
            StateHasChanged();
        }
        else
        {
            Logger.LogWarning($"Unauthorized attempt to delete post ID: {postId}");
            FeedErrorMessage = "You do not have authorization to delete this post!";
        }
    }

    private async Task AddComment(PostModel post)
    {
        if (!string.IsNullOrWhiteSpace(commentText))
        {
            var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var loggedInUser = userAuthenticationState.User;
            var loggedInUserId = UserManager.GetUserId(loggedInUser);

            var newComment = new CommentModel
                {
                    CommentText = commentText,
                    PostId = post.PostId,
                    CommentCreatedTimestamp = DateTime.UtcNow,
                    UserId = loggedInUserId
                };

            await PostService.AddCommentAsync(newComment);
            commentText = string.Empty;
            await RefreshFeed();
        }
        else
        {
            FeedErrorMessage = "Your comment cannot be added at this time - please try again!";
        }
    }

    private async Task RefreshFeed()
    {
        posts = await PostService.FetchFeedPostAsync();
        StateHasChanged();
    }

    private async Task SaveCommentAsync(CommentModel comment)
    {
        if (!string.IsNullOrWhiteSpace(commentText))
        {
            comment.CommentText = commentText;
            await PostService.UpdateCommentAsync(comment.CommentId, commentText, currentUserId);
            editedCommentId = 0;
            commentText = string.Empty;
            StateHasChanged();
        }
        else
        {
            FeedErrorMessage = "Your comment is blank - please add your message and try again!";
        }
    }

    private void CancelEditing()
    {
        editedCommentId = 0;
        commentText = string.Empty;
    }

    private void EditComment(CommentModel comment)
    {
        editedCommentId = comment.CommentId;
        commentText = comment.CommentText;
    }

    private async Task DeleteCommentAsync(int commentId)
    {
        var commentedDeleted = await PostService.RemoveCommentAsync(commentId, currentUserId);
        if (commentedDeleted)
        {
            var commentPendingDeletion = posts.SelectMany(post => post.PostComments).FirstOrDefault(comment => comment.CommentId == commentId);
            if (commentPendingDeletion != null)
            {
                var post = posts.FirstOrDefault(post => post.PostComments.Contains(commentPendingDeletion));
                post?.PostComments.Remove(commentPendingDeletion);
            }
        }
        else
        {
            FeedErrorMessage = "You do not have authorization to delete this comment!";
        }
        StateHasChanged();
    }
}
