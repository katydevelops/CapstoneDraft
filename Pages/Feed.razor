@page "/feed"
@using CapstoneDraft.Models
@using CapstoneDraft.Services
@using Microsoft.AspNetCore.Identity
@inject PostService PostService
@inject UserManager<UserModel> UserManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Feed> Logger

@if (posts == null)
{
    <h1>There are currently no posts in the feed!</h1>
}
@foreach (var post in posts)
{
    <div class="fullsize-container">
    <div class="social-media-container">
            <h4>Name: @post.AuthorName</h4>
            <h5>Subject:  @post.PostSubject</h5>
            <div class="social-media-card">
                <p>@post.PostMessageBody</p>
                <p>Posted by @(post.AuthorName) on @post.PostCreatedTimestamp.ToString("MM/dd/yy")</p>
                <img class="feed-photo" src="@($"/{post.PostPhoto}")" asp-append-version="true" alt="Post image" />
        </div>
            <div class="feed-button-container">
                <button class="btn btn-danger" @onclick="() => LikePostAsync(post)">😍 Like (@post.PostLikes)</button>
                <div>
                    @if (post.UserId == currentUserId)
                    {
                        <button class="btn btn-warning" @onclick="() => EditPost(post.PostId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeletePostAsync(post.PostId)">Delete</button>
                    }
                </div>
                <div>
                    <form @onsubmit="@(async () => await AddComment(post))">
                        <input type="text" @bind="commentText" class="custom-form-elements" placeholder="Add a comment" />
                        <button type="submit" class="btn btn-primary">🗯 Comment</button>
                    </form>
                </div>
                <div>
                    <h5>Comments:</h5>
                    @foreach (var comment in post.PostComments)
                    {
                        if (editedCommentId == comment.CommentId)
                        {
                            <input type="text" @bind="commentText" />
                            <button @onclick="() => SaveCommentAsync(comment)">Save</button>
                            <button class="btn btn-danger" @onclick="() => CancelEditing()">Cancel</button>
                        }
                        else
                        {
                            <p>@comment.CommentText</p>
                            @if (comment.UserId == currentUserId)
                            {
                                <button class="btn btn-warning" @onclick="() => EditComment(comment)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteCommentAsync(comment.CommentId)">Delete</button>
                            }
                        }
                    }
                </div>
        </div>
    </div>
</div>
}


@code {
    public List<PostModel> posts;
    private string commentText;
    private int editedCommentId;
    private string currentUserId;
    private string FeedErrorMessage;


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Fetching user authentication state.");
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var loggedInUser = userAuthenticationState.User;
        if (loggedInUser.Identity.IsAuthenticated)
        {
            Logger.LogInformation("User is authenticated. Fetching posts.");
            var loggedInUserId = UserManager.GetUserId(loggedInUser);
            currentUserId = loggedInUserId;
            posts = await PostService.FetchFeedPostAsync();
        }
        else
        {
            Logger.LogWarning("User is not authenticated.");
        }
    }

    private async Task LikePostAsync(PostModel Post)
    {
        Post.PostLikes++;
        await PostService.EditPostAsync(Post);
    }

    private void EditPost(int postId)
    {
        Logger.LogInformation($"Navigating to edit post page for post ID: {postId}");
        NavigationManager.NavigateTo($"/EditPost/{postId}");
    }

    private async Task DeletePostAsync(int postId)
    {
        Logger.LogInformation($"Attempting to delete post ID: {postId}");
        var postPendingDeletion = posts.FirstOrDefault(post => post.PostId == postId);
        if (postPendingDeletion != null && postPendingDeletion.UserId == currentUserId)
        {
            await PostService.RemovePostAsync(postId);
            posts.Remove(postPendingDeletion);
            StateHasChanged();
        }
        else
        {
            FeedErrorMessage = "You do not have authorization to delete this post!";
        }
    }

    private async Task AddComment(PostModel post)
    {

    }

    private async Task SaveCommentAsync(CommentModel comment)
    {
        if (!string.IsNullOrWhiteSpace(commentText))
        {
            comment.CommentText = commentText;
            await PostService.UpdateCommentAsync(comment.CommentId, commentText, currentUserId);
        }
    }

    private void CancelEditing()
    {
        editedCommentId = 0;
        commentText = string.Empty;
    }

    private void EditComment(CommentModel comment)
    {
        editedCommentId = comment.CommentId;
        commentText = comment.CommentText;
    }

    private async Task DeleteCommentAsync(int commentId)
    {
        var commentedDeleted = await PostService.RemoveCommentAsync(commentId, currentUserId);
        if (commentedDeleted)
        {
            var commentPendingDeletion = posts.SelectMany(post => post.PostComments).FirstOrDefault(comment => comment.CommentId == commentId);
            if (commentPendingDeletion != null)
            {
                var post = posts.FirstOrDefault(post => post.PostComments.Contains(commentPendingDeletion));
                post?.PostComments.Remove(commentPendingDeletion);
            }
        }
        else
        {
            FeedErrorMessage = "You do not have authorization to delete this comment!";
        }
        StateHasChanged();
        }
    }
}
