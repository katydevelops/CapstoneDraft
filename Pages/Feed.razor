@page "/feed"
@using CapstoneDraft.Models
@using CapstoneDraft.Services
@using Microsoft.AspNetCore.Identity
@inject PostService PostService
@inject UserManager<UserModel> UserManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@* Implement more sophisticated way of ensuring the user is authorized to view the feed by using Authentication State Provider's built-in Cascading Authentication State component. The user will see the content between the AuthorizeView and Authorized tags if their login details are correctly provided by Authentication State Provider during the component initialization.
 *@
 <CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="full-size-container">
                <div class="custom-input-elements">
                    <h2 class="center-form">🌐 Welcome to the Safety Net Feed! 🌐</h2>
                    <button @onclick="GoToAddPostPageAsync" class="yellow-animated-button">Create a New Post!</button>
                </div>
                @* Implement ability for the user to filter their feed by a category of safety tip, event or incidence *@
                <div class="custom-input-elements">
                    <div class="center-form">
                        <label for="category">Filter Posts by Category: </label>
                        <select @onchange="CategoryDropdownSelectedAsync" class="custom-dropdown">
                            <option value="">Select a Category</option>
                            <option value="Safety Tip">Safety Tip</option>
                            <option value="Safety Event">Safety Event</option>
                            <option value="Report a Safety Incident">Report a Safety Incident</option>
                        </select>
                    </div>
                </div>
                @* Add error handling to manage the initial feed when there are currently no posts *@
                @if (posts == null || !posts.Any())
                {
                    <h1>There are currently no posts in the feed!</h1>
                }
                @if (!string.IsNullOrEmpty(FeedErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">@FeedErrorMessage</div>
                }
                else
                {
                    @foreach (var post in posts)
                    {
                        @* Post header that will hold the name, subject and category for each post *@
                        <div class="card mb-3">
                            <div class="feed-post-header">
                                <h6><strong>Name:</strong> @post.AuthorName</h6>
                                <h6><strong>Subject:</strong> @post.PostSubject</h6>
                                <h6><strong>Post Category:</strong> @post.PostCategory</h6>
                            </div>
                            @* Post body will hold the post details, photo (if one was uploaded) and the author and time stamp of the post *@
                            <div class="feed-post-body">
                                <p class="feed-post-text">@post.PostMessageBody</p>
                                <p class="feed-post-text"><sub>Posted by <strong>@(post.AuthorName) </strong> - @post.PostCreatedTimestamp.ToString("MM/dd/yy")</sub></p>
                                @if (!string.IsNullOrWhiteSpace(post.PostPhoto))
                                {
                                    <img src="@($"/{post.PostPhoto}")" asp-append-version="true" alt="Post image" class="minify-img" />
                                }
                            </div>
                            @* Post footer will show the like, edit and delete post for the author of the post - or only the like button for users who are not the author of the post *@
                            <div class="feed-post-footer">
                                <div class="feed-post-button-container">
                                    <div class="post-like-edit-delete">
                                        <button class="like-button" @onclick="() => LikePostAsync(post)">😍 Like (@post.PostLikes)</button>
                                        @if (post.UserId == currentUserId)
                                        {
                                            <button class="edit-button" @onclick="() => EditPost(post.PostId)">Edit Post 📝</button>
                                            <button class="delete-button" @onclick="() => DeletePostAsync(post.PostId)">Delete Post 🚮</button>
                                        }
                                    </div>
                                    @* The feed comment container holds the text area and the post button for other users to leave comments for each post *@
                                    <div class="feed-comment-container">
                                        <form @onsubmit="@(async () => await AddComment(post))">
                                            <input type="text" @bind="commentText" class="comment-input-textarea" placeholder="Add a comment" />
                                            <button type="submit" class="comment-button">📣 Comment</button>
                                        </form>
                                    </div>
                                    @* The feed user comment container holds all the comments that each post has received *@
                                    <div class="feed-user-comments">
                                        <h5>Comments:</h5>
                                        @foreach (var comment in post.PostComments)
                                        {
                                            if (editedCommentId == comment.CommentId)
                                            {
                                                @* The feed edit comment container will enable users to edit the content of their own comments if they are authorized through Authentication State Provider *@
                                                <div class="feed-edit-comment-container">
                                                    <input type="text" @bind="commentText" class="comment-input" />
                                                    <button @onclick="() => SaveCommentAsync(comment)" class="save-button">Save</button>
                                                    <button class="cancel-button" @onclick="() => CancelEditing()">Cancel</button>
                                                </div>
                                            }
                                            else
                                            {
                                                @* Container will hold all the comments and the edit and delete button where authorized users will be able to initialize the edit comment functionality or delete their own comment *@
                                                <p>@comment.CommentText</p>
                                                <p><sub>by <strong>@comment.User.UserName</strong> posted on @comment.CommentCreatedTimestamp.ToShortDateString()</sub></p>
                                                @if (comment.UserId == currentUserId)
                                                {
                                                    <div class="comment-button-container">
                                                        <button class="edit-comment-button" @onclick="() => EditComment(comment)">Edit</button>
                                                        <button class="delete-comment-button" @onclick="() => DeleteCommentAsync(comment.CommentId)">Delete</button>
                                                    </div>
                                                }
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </Authorized>
        <NotAuthorized>
            @* If not authorized through Authentication State Provider, the user will see a message that they need to login to see the feed and a button to route them to do so  *@
            <div class="unathorized-container ">
                <div class="neon-bg-container">
                    <div class="center-form">
                        <div class="social-media-card">
                            <div class="feed-post-header">
                                <h3>You need to be logged in to view the feed!</h3>
                            </div>
                                <div class="feed-post-body">
                                    <button class="yellow-animated-button" onclick="location.href='/';">Login</button>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>



@code {
    public List<PostModel> posts;
    private string commentText;
    private int editedCommentId;
    private string currentUserId;
    private string FeedErrorMessage;
    private string categorySelected = ""; // Initialize category selected to show all


    protected override async Task OnInitializedAsync()
    {
        // Grab user state via Authentication State Provider, then grab the current user Id which will be used to show the edit and delete functionality for their own posts
        var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var loggedInUser = userAuthenticationState.User;

        if (loggedInUser.Identity.IsAuthenticated)
        {
            var loggedInUserId = UserManager.GetUserId(loggedInUser);
            currentUserId = loggedInUserId;
            posts = await PostService.FetchFeedPostAsync();
        }
        else
        {
            FeedErrorMessage = "You are not authorized to view the feed at this time - please login and try again!";
        }
    }

    // Navigation for the Create a New Post button
    private async Task GoToAddPostPageAsync()
    {
        NavigationManager.NavigateTo("/AddPost");
    }

    // Trigger drop down event handler that will filter the feed based on the user's category selection
    private async Task CategoryDropdownSelectedAsync(ChangeEventArgs args)
    {
        categorySelected = args.Value?.ToString();
        await UpdateCategoryDropdownAsync();
    }

    private async Task UpdateCategoryDropdownAsync()
    {
        // If no category is selected - show all posts - otherwise, filter the posts based on the category they were posted under
        if (string.IsNullOrEmpty(categorySelected) || categorySelected == "All Categories Selected")
        {
            posts = await PostService.FetchFeedPostAsync();
        }
        else
        {
            posts = await PostService.FetchPostsByCategoryAsync(categorySelected);
        }
        StateHasChanged();
    }

    private async Task LikePostAsync(PostModel Post)
    {
        // Trigger like event handler and store the update number of likes to the post in the database so it can be retrieved in the future
        Post.PostLikes++;
        await PostService.EditPostAsync(Post);
    }

    // Navigate to the Edit Post component while passing the post Id as a paramter
    private void EditPost(int postId)
    {
        NavigationManager.NavigateTo($"/EditPost/{postId}");
    }

    private async Task DeletePostAsync(int postId)
    {
        // Grab the post in the collection that matches the selected Id and store it to the pending deletion variable. Perform a null check and ensure that the user deleting the post is the author of the post before deleting.
        var postPendingDeletion = posts.FirstOrDefault(post => post.PostId == postId);
        if (postPendingDeletion != null && postPendingDeletion.UserId == currentUserId)
        {
            await PostService.RemovePostAsync(postId);
            posts.Remove(postPendingDeletion);
            StateHasChanged();
        }
        else
        {
            FeedErrorMessage = "You do not have authorization to delete this post!";
        }
    }

    private async Task AddComment(PostModel post)
    {
        if (!string.IsNullOrWhiteSpace(commentText))
        {
            // Grab the authentication state of the user clicking the comment button and use it to grab the user Id. Create a new comment object, add it to the database based on the user id, clear the text area and refresh the feed to ensure the comment appears when the user navigates back to the feed.
            var userAuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var loggedInUser = userAuthenticationState.User;
            var loggedInUserId = UserManager.GetUserId(loggedInUser);

            var newComment = new CommentModel
                {
                    CommentText = commentText,
                    PostId = post.PostId,
                    CommentCreatedTimestamp = DateTime.UtcNow,
                    UserId = loggedInUserId
                };

            await PostService.AddCommentAsync(newComment);
            commentText = string.Empty;
            await RefreshFeed();
        }
        else
        {
            FeedErrorMessage = "Your comment cannot be blank - please try again!";
        }
    }

    private async Task RefreshFeed()
    {
        // Refresh the feed by fetching all of the posts in the database, including the updated changes to any of the post data and refresh the state to ensure the UI updates to show the most up-to-date post information
        posts = await PostService.FetchFeedPostAsync();
        StateHasChanged();
    }

    private async Task SaveCommentAsync(CommentModel comment)
    {
        if (!string.IsNullOrWhiteSpace(commentText))
        {
            // Store the comment information entered in the textarea by the user to the CommentText property of the model and update it in the database based on the comment id and user id. Clear and reset the edit comment text area and then refresh the state to ensure the edited comment appears.s
            comment.CommentText = commentText;
            await PostService.UpdateCommentAsync(comment.CommentId, commentText, currentUserId);
            editedCommentId = 0;
            commentText = string.Empty;
            StateHasChanged();
        }
        else
        {
            FeedErrorMessage = "Your comment is blank - please add your message and try again!";
        }
    }

    private void CancelEditing()
    {
        // Enables the user to cancel editing their comment in case they change their mind 
        editedCommentId = 0;
        commentText = string.Empty;
    }

    private void EditComment(CommentModel comment)
    {
        // Edit button triggers event which takes in comment object as a paramter and updates the id and comment details of the object
        editedCommentId = comment.CommentId;
        commentText = comment.CommentText;
    }

    private async Task DeleteCommentAsync(int commentId)
    {
        var commentDeleted = await PostService.RemoveCommentAsync(commentId, currentUserId);
        if (commentDeleted)
        {
            var commentPendingDeletion = posts.SelectMany(post => post.PostComments).FirstOrDefault(comment => comment.CommentId == commentId);
            if (commentPendingDeletion != null)
            {
                var post = posts.FirstOrDefault(post => post.PostComments.Contains(commentPendingDeletion));
                post?.PostComments.Remove(commentPendingDeletion);
            }
        }
        else
        {
            FeedErrorMessage = "You do not have authorization to delete this comment!";
        }
        StateHasChanged();
    }
}
